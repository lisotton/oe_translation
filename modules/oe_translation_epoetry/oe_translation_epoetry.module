<?php

/**
 * @file
 * OE Translation ePoetry module file.
 */

declare(strict_types = 1);

use Drupal\Core\Template\Attribute;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\oe_translation\Entity\TranslationRequestInterface;
use Drupal\oe_translation_epoetry\TranslationRequestEpoetry;
use Drupal\oe_translation_epoetry\TranslationRequestEpoetryInterface;
use Drupal\oe_translation_remote\TranslationRequestRemoteInterface;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function oe_translation_epoetry_entity_bundle_info_alter(array &$bundles): void {
  if (isset($bundles['oe_translation_request']['epoetry'])) {
    $bundles['oe_translation_request']['epoetry']['class'] = TranslationRequestEpoetry::class;
  }
}

/**
 * Implements hook_theme().
 */
function oe_translation_epoetry_theme() {
  return [
    'content_html_template' => [
      'variables' => [
        'request_id' => NULL,
        'source_language' => NULL,
        'items' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_entity_ENTITY_TYPE_view_alter().
 */
function oe_translation_epoetry_oe_translation_request_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->bundle() !== 'epoetry') {
    return;
  }

  /** @var \Drupal\oe_translation_epoetry\TranslationRequestEpoetryInterface $entity */
  if (!isset($build['meta'])) {
    return;
  }

  $header = &$build['meta']['#header'];
  $header['epoetry_request_status'] = t('ePoetry request status');
  $header['request_id'] = t('Request ID');
  $header['auto_accept'] = t('Auto-accept translations');
  $header['auto_sync'] = t('Auto sync translations');
  $header['requested_deadline'] = t('Requested deadline');
  $row = &$build['meta']['#rows'][0];

  if ($entity->getEpoetryRequestStatus()) {
    $row['epoetry_request_status'] = [
      'data' => [
        '#theme' => 'tooltip',
        '#label' => $entity->getEpoetryRequestStatus(),
        '#text' => $entity->getEpoetryRequestStatusDescription($entity->getEpoetryRequestStatus()),
      ],
    ];
  }
  else {
    $row['epoetry_request_status'] = NULL;
  }

  $row['request_id'] = $entity->getRequestId(TRUE);
  $row['auto_accept'] = $entity->isAutoAccept() ? t('Yes') : t('No');
  $plugin_auto_accept = $entity->getTranslatorProvider()->getProviderConfiguration()['auto_accept'];
  if ($plugin_auto_accept) {
    $row['auto_accept'] = t('Yes');
  }
  $row['auto_sync'] = $entity->isAutoSync() ? t('Yes') : t('No');
  $row['requested_deadline'] = $entity->getDeadline()->format('Y-M-d');
  $build['comment'] = [
    '#type' => 'fieldset',
    '#title' => t('Message to provider'),
  ];
  $build['comment'][] = [
    '#markup' => $entity->getMessage() ?? t('No message sent.'),
  ];

  $previous_request = $entity->get('update_of')->entity;
  if ($previous_request instanceof TranslationRequestEpoetryInterface) {
    $build['update_request_of'] = [
      '#type' => 'fieldset',
      '#title' => t('Updated request'),
      0 => [
        '#markup' => t('The current request was created as an update to a previous one (<strong>@request_id</strong>) which was still ongoing in ePoetry with at least 1 language. That request has been marked as Finished and was replaced with the current one.', [
          '@request_id' => $previous_request->toLink($previous_request->getRequestId(TRUE))->toString(),
        ]),
      ],
    ];
  }

  $logs = _oe_translation_create_request_logs_tables($entity);
  if ($logs) {
    $build['logs'] = [
      '#type' => 'details',
      '#title' => t('Log messages (@count)', ['@count' => count($logs['#rows'])]),
      0 => $logs,
    ];
  }

  /** @var \Drupal\oe_translation_epoetry\EpoetryOngoingNewVersionRequestHandlerInterface $new_version_handler */
  $new_version_handler = \Drupal::service('oe_translation_epoetry.new_version_request_handler');

  $build['update_request'] = [
    '#type' => 'fieldset',
    '#title' => t('Request an update'),
    '#access' => $new_version_handler->canCreateRequest($entity),
  ];

  $build['update_request'][] = [
    '#markup' => '<p>' . $new_version_handler->getInfoMessage($entity) . '</p>',
  ];

  $build['update_request'][] = [
    '#type' => 'link',
    '#title' => t('Update'),
    '#url' => Url::fromRoute('oe_translation_epoetry.new_version_request', [
      'translation_request' => $entity->id(),
    ], [
      'query' => [
        'destination' => Url::fromRoute('entity.' . $entity->getContentEntity()->getEntityTypeId() . '.remote_translation', [$entity->getContentEntity()->getEntityTypeId() => $entity->getContentEntity()->id()])->toString(),
      ],
      'attributes' => ['class' => ['button', 'button--primary']],
    ]),
  ];

  $url = Url::fromRoute('oe_translation_epoetry.modify_linguistic_request', [
    'translation_request' => $entity->id(),
  ], [
    'query' => [
      'destination' => Url::fromRoute('entity.' . $entity->getContentEntity()
        ->getEntityTypeId() . '.remote_translation', [
          $entity->getContentEntity()
            ->getEntityTypeId() => $entity->getContentEntity()->id(),
        ])->toString(),
    ],
    'attributes' => ['class' => ['button', 'button--primary']],
  ]);

  $build['modify_request'] = [
    '#type' => 'fieldset',
    '#title' => t('Add new languages'),
    '#access' => $url->access(),
  ];

  $build['modify_request'][] = [
    '#markup' => '<p>' . t('Update this request to add new languages. <strong>Important</strong>: you can only add additional languages, you cannot cancel existing ones.') . '</p>',
  ];

  $build['modify_request'][] = [
    '#type' => 'link',
    '#title' => t('Add new languages'),
    '#url' => $url,
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Print a warning on the translation form if the previous epoetry request was
 * rejected.
 */
function oe_translation_epoetry_form_oe_translation_remote_new_form_alter(array &$form, FormStateInterface $form_state) {
  if ($form_state->getUserInput()) {
    // We don't want to run this on Ajax rebuild.
    return;
  }
  $entity = $form['#entity'];

  $ids = \Drupal::entityTypeManager()->getStorage('oe_translation_request')
    ->getQuery()
    ->accessCheck(FALSE)
    ->condition('content_entity__entity_type', $entity->getEntityTypeId())
    ->condition('content_entity__entity_id', $entity->id())
    ->condition('bundle', 'epoetry')
    ->sort('id', 'DESC')
    ->range(0, 1)
    ->execute();

  if (!$ids) {
    return;
  }

  $id = reset($ids);
  /** @var \Drupal\oe_translation_epoetry\TranslationRequestEpoetryInterface $request */
  $request = \Drupal::entityTypeManager()->getStorage('oe_translation_request')->load($id);
  if ($request->getEpoetryRequestStatus() === TranslationRequestEpoetryInterface::STATUS_REQUEST_REJECTED) {
    \Drupal::messenger()->addWarning(t('The last ePoetry translation request with the ID <strong>@id</strong> had been rejected. You can resubmit to correct it.', ['@id' => $request->getRequestId(TRUE)]));
  }
}

/**
 * Implements hook_views_data_alter().
 */
function oe_translation_epoetry_views_data_alter(&$data) {
  $data['oe_translation_request__request_id']['request_id']['filter'] = [
    'title' => t('Formatted request ID'),
    'help' => t('Filters by the formatted request ID.'),
    'field' => 'request_id',
    'id' => 'oe_translation_epoetry_request_id_filter',
  ];
  $data['oe_translation_request__target_languages']['target_languages_with_tooltip'] = [
    'title' => t('Target languages with tooltip'),
    'group' => t('Translation Request'),
    'field' => [
      'title' => t('Target languages with tooltip'),
      'help' => t('Shows the number of requested languages with a tooltip containing more information.'),
      'id' => 'oe_translation_epoetry_target_languages_with_tooltip',
    ],
  ];
  $data['oe_translation_request__target_languages']['target_languages_langcode']['filter']['id'] = 'oe_translation_epoetry_target_languages_filter';
}

/**
 * Implements template_preprocess_views_view_table().
 */
function oe_translation_epoetry_preprocess_views_view_table(&$variables) {
  $view = $variables['view'];
  if ($view->id() !== 'epoetry_translation_request_dashboard') {
    return;
  }

  // For the ePoetry dashboard, highlight the failed and rejected requests.
  foreach ($variables['rows'] as $row) {
    $error = isset($row['columns']['request_status']) && (string) $row['columns']['request_status']['content'][0]['field_output']['#markup'] === TranslationRequestEpoetryInterface::STATUS_REQUEST_FAILED;
    $warning = isset($row['columns']['epoetry_status']['content'][0]) && (string) $row['columns']['epoetry_status']['content'][0]['field_output']['#markup'] === TranslationRequestEpoetryInterface::STATUS_REQUEST_REJECTED;
    if ($error) {
      $row['attributes']->addClass('color-error');
    }
    if ($warning) {
      $row['attributes']->addClass('color-warning');
    }
  }

}

/**
 * Implement template_preprocess_table__remote_language_list().
 */
function oe_translation_epoetry_preprocess_table__remote_language_list(array &$variables) {
  $id = (string) $variables['attributes']['data-translation-request'];
  $request = TranslationRequestEpoetry::load($id);
  if (!$request) {
    return;
  }

  if (!$request instanceof TranslationRequestEpoetryInterface || $request->getRequestStatus() === TranslationRequestEpoetryInterface::STATUS_REQUEST_FAILED) {
    return;
  }

  array_splice($variables['header'], 2, 0, [[
    'tag' => 'th',
    'attributes' => new Attribute(),
    'content' => t('Accepted deadline'),
  ],
  ]);

  foreach ($variables['rows'] as &$row) {
    // Add the accepted deadline per individual language.
    $langcode = (string) $row['attributes']['hreflang'];
    $accepted_deadline = $request->getTargetLanguageAcceptedDeadline($langcode);
    if ($accepted_deadline) {
      $deadline = $accepted_deadline->format('Y-M-d');
    }
    else {
      $deadline = 'N/A';
    }

    array_splice($row['cells'], 2, 0, [
      'accepted_deadline' => [
        'tag' => 'td',
        'attributes' => new Attribute(),
        'content' => $deadline,
      ],
    ]);

    // Mark the status as being from ePoetry if it's the case.
    $status = $row['cells']['status']['content']['#label'];
    $epoetry = FALSE;
    if (in_array($status, [
      TranslationRequestEpoetryInterface::STATUS_LANGUAGE_REQUESTED,
      TranslationRequestEpoetryInterface::STATUS_LANGUAGE_EPOETRY_ACCEPTED,
      TranslationRequestEpoetryInterface::STATUS_LANGUAGE_ONGOING,
      TranslationRequestEpoetryInterface::STATUS_LANGUAGE_CLOSED,
      TranslationRequestEpoetryInterface::STATUS_LANGUAGE_READY,
      TranslationRequestEpoetryInterface::STATUS_LANGUAGE_CANCELLED,
      TranslationRequestEpoetryInterface::STATUS_LANGUAGE_REJECTED,
      TranslationRequestEpoetryInterface::STATUS_LANGUAGE_SUSPENDED,
      TranslationRequestEpoetryInterface::STATUS_LANGUAGE_SENT,
    ])) {
      $epoetry = TRUE;
    }
    $review = Url::fromRoute('entity.oe_translation_request.remote_translation_review', [
      'oe_translation_request' => $request->id(),
      'language' => $langcode,
    ]);
    if ($review->access()) {
      // If, however, we can review the translation, it means it's been accepted
      // on our side and not in ePoetry.
      $epoetry = FALSE;
    }

    if ($epoetry) {
      $row['cells']['status']['content']['#label'] .= ' [in ePoetry]';
    }
  }

}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function oe_translation_epoetry_oe_translation_request_presave(TranslationRequestInterface $request) {
  if ($request->bundle() !== 'epoetry') {
    return;
  }

  $languages = $request->getTargetLanguages();

  // Mark the request as Translated if all languages are either Cancelled,
  // Rejected or in Review. This is because Cancelled and Rejected languages
  // cannot be continued anymore so they should allow the request to be
  // Translated. We do this in a presave because the ePoetry notifications
  // can come in any order so we have to check every time the request is saved.
  $request_translated = TRUE;
  foreach ($languages as $language_with_status) {
    if (!in_array($language_with_status->getStatus(), [
      TranslationRequestEpoetryInterface::STATUS_LANGUAGE_CANCELLED,
      TranslationRequestEpoetryInterface::STATUS_LANGUAGE_REJECTED,
      TranslationRequestEpoetryInterface::STATUS_LANGUAGE_REVIEW,
    ])) {
      // It means at least one language is still not Cancelled or Synchronised.
      $request_translated = FALSE;
    }
  }

  if ($request_translated) {
    $request->setRequestStatus(TranslationRequestRemoteInterface::STATUS_REQUEST_TRANSLATED);
  }

  // Mark the request as Finished if all languages are either Cancelled,
  // Rejected or Synchronised. This is because Cancelled and Rejected languages
  // cannot be continued anymore so they should allow the request to be
  // Finished. We do this in a presave because the ePoetry notifications
  // can come in any order so we have to check every time the request is saved.
  $request_finished = TRUE;
  foreach ($languages as $language_with_status) {
    if (!in_array($language_with_status->getStatus(), [
      TranslationRequestEpoetryInterface::STATUS_LANGUAGE_CANCELLED,
      TranslationRequestEpoetryInterface::STATUS_LANGUAGE_REJECTED,
      TranslationRequestEpoetryInterface::STATUS_LANGUAGE_SYNCHRONISED,
    ])) {
      // It means at least one language is still not Cancelled, Rejected or
      // Synchronised.
      $request_finished = FALSE;
    }
  }

  if ($request_finished) {
    $request->setRequestStatus(TranslationRequestRemoteInterface::STATUS_REQUEST_FINISHED);
  }

  // If at least one language is Requested, mark the entire request as
  // Requested. This can happen if all the languages become in Review (marking
  // the entire request as Translated) but then additional languages are added
  // to the request. This happens only if the ePoetry request is Executed and
  // the request is Translated.
  $epoetry_status = $request->getEpoetryRequestStatus();
  if ($epoetry_status === TranslationRequestEpoetryInterface::STATUS_REQUEST_EXECUTED && $request->getRequestStatus() === TranslationRequestEpoetryInterface::STATUS_REQUEST_TRANSLATED) {
    foreach ($request->getTargetLanguages() as $target_language_status) {
      if ($target_language_status->getStatus() === TranslationRequestRemoteInterface::STATUS_LANGUAGE_REQUESTED) {
        $request->setRequestStatus(TranslationRequestRemoteInterface::STATUS_REQUEST_REQUESTED);
        break;
      }
    }
  }
}
