<?php

/**
 * @file
 * The OpenEuropa Translation Poetry install file.
 */

declare(strict_types = 1);

use Drupal\Core\Site\Settings;

/**
 * Implements hook_requirements().
 */
function oe_translation_poetry_requirements($phase) {
  $requirements = [];

  // Show the Poetry configuration.
  if ($phase == 'runtime') {
    $requirements['poetry.service.endpoint'] = [
      'title' => t('Poetry service endpoint'),
      'value' => Settings::get('poetry.service.endpoint', t('Value not set')),
      'severity' => REQUIREMENT_INFO,
    ];

    $requirements['poetry.identifier.sequence'] = [
      'title' => t('Poetry identifier sequence'),
      'value' => Settings::get('poetry.identifier.sequence', t('Value not set')),
      'severity' => REQUIREMENT_INFO,
    ];

    $poetry_environment_variables = [
      'poetry.service.username' => t('Poetry service username'),
      'poetry.service.password' => t('Poetry service password'),
      'poetry.notification.username' => t('Poetry notification username'),
      'poetry.notification.password' => t('Poetry notification password'),
    ];

    foreach ($poetry_environment_variables as $variable => $name) {
      $value = Settings::get($variable, FALSE);
      $requirements[$variable] = [
        'title' => $name,
        'value' => $value ? t('Value set') : t('Value not set'),
        'severity' => REQUIREMENT_INFO,
      ];
    }

    $value = Settings::get('poetry.notification.endpoint_prefix', FALSE);
    $requirements['poetry.notification.endpoint_prefix'] = [
      'title' => 'Poetry notification endpoint prefix',
      'value' => $value ? $value : t('Value not set'),
      'severity' => REQUIREMENT_INFO,
    ];
  }

  return $requirements;
}
